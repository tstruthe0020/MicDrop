"""ZIP file creation service for preset packages"""
import zipfile
import logging
from pathlib import Path
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

def create_preset_zip(
    preset_files: List[Path],
    report_path: Path,
    output_dir: Path,
    uuid_str: str,
    chain_style: str = 'auto'
) -> Path:
    """
    Create ZIP file containing presets and mix report
    
    Args:
        preset_files: List of .aupreset file paths
        report_path: Path to mix_report.json
        output_dir: Directory containing the files
        uuid_str: Unique identifier
        chain_style: Chain style name for filename
        
    Returns:
        Path to created ZIP file
    """
    logger.info(f"Creating preset ZIP with {len(preset_files)} files")
    
    # Create ZIP filename
    safe_style = chain_style.replace('-', '_').replace(' ', '_')
    zip_filename = f"MicDrop_AutoChain_{safe_style}_{uuid_str[:8]}.zip"
    zip_path = output_dir / zip_filename
    
    try:
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            # Add mix report
            if report_path.exists():
                zipf.write(report_path, report_path.name)
                logger.debug(f"Added report: {report_path.name}")
            
            # Add preset files with proper directory structure
            for preset_file in preset_files:
                if preset_file.exists():
                    # Preserve the Logic Pro directory structure
                    arcname = str(preset_file.relative_to(output_dir))
                    zipf.write(preset_file, arcname)
                    logger.debug(f"Added preset: {arcname}")
                else:
                    logger.warning(f"Preset file not found: {preset_file}")
            
            # Add installation instructions
            readme_content = _generate_readme(chain_style, len(preset_files))
            zipf.writestr("README.txt", readme_content)
            
    except Exception as e:
        logger.error(f"Failed to create ZIP file: {e}")
        raise
    
    zip_size = zip_path.stat().st_size
    logger.info(f"Created ZIP file: {zip_path.name} ({zip_size} bytes)")
    
    return zip_path

def _generate_readme(chain_style: str, preset_count: int) -> str:
    """Generate README content for the ZIP file"""
    return f"""MicDrop Auto Vocal Chain - {chain_style.title()} Style
================================================

This package contains {preset_count} professionally crafted Logic Pro presets
optimized for your audio using AI-powered analysis.

INSTALLATION:
1. Extract this ZIP file to your desktop
2. Open Logic Pro
3. Load your vocal track
4. For each preset file (.aupreset):
   - Drag the preset onto the corresponding plugin in Logic Pro
   - Or use the plugin's preset browser to load the preset

RECOMMENDED CHAIN ORDER:
1. MEqualizer - Surgical EQ and frequency shaping
2. TDR Nova - Dynamic EQ and de-essing
3. 1176 Compressor - Character compression  
4. Graillon 3 - Pitch correction (vocals only)
5. LA-LA - Gentle leveling and control
6. Fresh Air - Presence and high-frequency enhancement
7. MCompressor - Glue compression for cohesion
8. MConvolutionEZ - Reverb and spatial processing

TIPS:
- Apply presets in the recommended order for best results
- Adjust plugin mix/wet controls to taste
- Check the mix_report.json for detailed analysis and rationale
- These presets are optimized for your specific audio characteristics

For support and more information, visit: github.com/tstruthe0020/MicDrop

Generated by MicDrop Auto Vocal Chain v1.0
"""